// <auto-generated />
using System;
using EventManagement.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagement.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250304174358_AddEntitiesToDb")]
    partial class AddEntitiesToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventManagement.WebApi.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7f8b7d4-ead4-4751-bb74-f190ce6ff000",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBoWHEobkBAuAeai+nuudmqn+f4dqWv+IP/mlCUTza9GJkdQg3yAbq1xGz/TMMPNpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd5503f5-305c-4b6c-acc7-93e935cb3343",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47c1e34b-afce-4133-a758-6d84b6e0bc85",
                            Email = "use1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP31gqpp1jtFauQpvJqsHSsvuRzpfuCXhkooNhrcWEzNBFzqsysIDgbWM6yr5jFyoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdcff4ba-edf4-40a7-8cfd-efadc5644801",
                            TwoFactorEnabled = false,
                            UserName = "use1@gmail.com"
                        },
                        new
                        {
                            Id = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8fca6c5-5c4e-4f62-b07b-e8ed06f4b43f",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBrmTFpdnnmL/HW2wkPU4FbZgf+jxWMjIk6jGfrLskRFh3K0L3sIhlVfGiW1oeZrrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47a75ef4-e602-41ac-80f6-80058a425d85",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9620240d-c102-4917-8d2e-af059e144f47",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFvkI+Qv3ljQ2w+oGYYwC4WskGKlvgYRlQ6cwH8U4ottJusg3qVyKqEE6Lra/yBQ+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4de3b84c-f8bb-431e-925b-d0b44c7aee7f",
                            TwoFactorEnabled = false,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5073ef93-329b-4124-b464-65ce435a249d",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHoiy27h7GhKVAslPG2gfxjHZJidai/EGuM7/26cmKKSav+Ej+vy8wGHxP/TW+m3fQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ce8b611-6b84-4fce-9772-28b788ee9509",
                            TwoFactorEnabled = false,
                            UserName = "user4@gmail.com"
                        },
                        new
                        {
                            Id = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "928997d8-e96a-47be-a366-3ccecd9d7f4f",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVLKK6c+SW70Z0NpM3t2W8nLBYpj44g3kXT8Synbz8DJ+mUJB7QymWCUvAbnzIAsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e4e07b9-7bc5-445d-afc6-181c5505a6d7",
                            TwoFactorEnabled = false,
                            UserName = "user5@gmail.com"
                        },
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4162d55-22a6-4dac-8acc-c5d8f67522c9",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBI0NDkYwMlJ+v/2wFJn/IYivz0muv+N7T8RqUgFr29wQvzcZQpqiXAilSqWwjwvXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "133c302a-840e-4466-81b2-593fe4487164",
                            TwoFactorEnabled = false,
                            UserName = "user6@gmail.com"
                        });
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("RSVPs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70c32e27-8b28-4e66-a299-e4e4843bf37a",
                            ConcurrencyStamp = "70c32e27-8b28-4e66-a299-e4e4843bf37a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b6655fd0-51ca-4557-9874-27bf20be094d",
                            ConcurrencyStamp = "b6655fd0-51ca-4557-9874-27bf20be094d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            RoleId = "70c32e27-8b28-4e66-a299-e4e4843bf37a"
                        },
                        new
                        {
                            UserId = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            RoleId = "b6655fd0-51ca-4557-9874-27bf20be094d"
                        },
                        new
                        {
                            UserId = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            RoleId = "b6655fd0-51ca-4557-9874-27bf20be094d"
                        },
                        new
                        {
                            UserId = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            RoleId = "b6655fd0-51ca-4557-9874-27bf20be094d"
                        },
                        new
                        {
                            UserId = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            RoleId = "b6655fd0-51ca-4557-9874-27bf20be094d"
                        },
                        new
                        {
                            UserId = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            RoleId = "b6655fd0-51ca-4557-9874-27bf20be094d"
                        },
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            RoleId = "b6655fd0-51ca-4557-9874-27bf20be094d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.HasOne("EventManagement.WebApi.Model.Event", "Event")
                        .WithMany("RSVPs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.Navigation("RSVPs");
                });
#pragma warning restore 612, 618
        }
    }
}
