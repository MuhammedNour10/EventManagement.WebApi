// <auto-generated />
using System;
using EventManagement.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagement.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250304184338_updateEvent")]
    partial class updateEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventManagement.WebApi.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "008dde27-cba2-4c72-947c-1e6c6c1910e2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDy4+udU9GSyj36ROUf0Xqra7FjSSGX+I0LtCH4Jl0HPIEE/Iv8kFXtfJ4zCNdDPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "692c3eec-5022-4499-b01a-b739741ba3de",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01316028-1571-41c2-903b-ca543285cb64",
                            Email = "use1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEb0cTV/FJDrAJc7iVh45uf84OZnbnEjSz5te7cXgoksBghO67qce+YsLvNIn+jvlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "441fcafc-14ba-4dbc-98d8-f5b6bc676f00",
                            TwoFactorEnabled = false,
                            UserName = "use1@gmail.com"
                        },
                        new
                        {
                            Id = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5216fe16-9ba5-473b-8b99-1a9825503014",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGOe3WonV0fBQYFYOCDeeRy2jpV2J1Vc7GbiRgjvDrxZoanm6pGcB1PlsCIR4UMQLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35e4ab9c-b08e-47be-9bc4-a89acd9d29d2",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ff2bd7e-e293-4c0d-8838-7461e42fe15b",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEATdM3ksraZnXizRYT3Jh5WW+kEaeaocsYkwRc9SYuhr2V9v0uI5lHJtXfC1io4Bfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65b9e5d1-09d2-4b8a-850f-6fe290a6280e",
                            TwoFactorEnabled = false,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "221a8c24-c47c-49bb-8f47-32f9e0975dfd",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPU75X8v+AXVBYygf1g8xo01EIdpH/N6+4viEEWcggiigFeA4LaBUbD6AKnGmpztZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce6ab416-7c70-49ff-a135-7fdf27407809",
                            TwoFactorEnabled = false,
                            UserName = "user4@gmail.com"
                        },
                        new
                        {
                            Id = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65140154-349c-4516-93f0-ca78d8a00d41",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECNWeJJaA0Ij301AchLaozsSCl/xSYFOojqlaJBxzfacYUDfx06lIJn2uRjps+k2xA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e8c49af-2e9a-4efa-89a9-83337d17367f",
                            TwoFactorEnabled = false,
                            UserName = "user5@gmail.com"
                        },
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31db1f10-35d7-4efe-8391-2e9b4a39a0f0",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIwDSIxnFdWdIgoaaWsGRu96LKcZPf++yxIX9blyBIxoS1vwN8RszEsY8/KI3i9SqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ae3184c-d156-436e-9de8-d378781e6ebe",
                            TwoFactorEnabled = false,
                            UserName = "user6@gmail.com"
                        });
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("RSVPs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0be77fe1-6246-4355-9cd6-8964314b759f",
                            ConcurrencyStamp = "0be77fe1-6246-4355-9cd6-8964314b759f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "62f42019-5d39-4465-8fc2-29aa01e5497c",
                            ConcurrencyStamp = "62f42019-5d39-4465-8fc2-29aa01e5497c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            RoleId = "0be77fe1-6246-4355-9cd6-8964314b759f"
                        },
                        new
                        {
                            UserId = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            RoleId = "62f42019-5d39-4465-8fc2-29aa01e5497c"
                        },
                        new
                        {
                            UserId = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            RoleId = "62f42019-5d39-4465-8fc2-29aa01e5497c"
                        },
                        new
                        {
                            UserId = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            RoleId = "62f42019-5d39-4465-8fc2-29aa01e5497c"
                        },
                        new
                        {
                            UserId = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            RoleId = "62f42019-5d39-4465-8fc2-29aa01e5497c"
                        },
                        new
                        {
                            UserId = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            RoleId = "62f42019-5d39-4465-8fc2-29aa01e5497c"
                        },
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            RoleId = "62f42019-5d39-4465-8fc2-29aa01e5497c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.HasOne("EventManagement.WebApi.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
