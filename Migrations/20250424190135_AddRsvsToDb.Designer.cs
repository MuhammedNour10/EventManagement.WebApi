// <auto-generated />
using System;
using EventManagement.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagement.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250424190135_AddRsvsToDb")]
    partial class AddRsvsToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventManagement.WebApi.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f53e9421-b0ac-4959-9f57-48f0d59f95a2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7hEDu1fmZQKu4MQMsGvaQMPtBzo6v/zpGGhbKctewAfyQz7CD9LqSvgcExecQsKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb35a9b0-d6dc-417d-aeed-f37de18c121f",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "333072a1-22a3-4f2f-9c6b-26cd1143242a",
                            Email = "use1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK433Z/oYUPB6PnZuMgu3QMlR6PRQGa87icKV7ryvE8cIpC34VyzB+O1Gy6lzTqOcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c34748f4-9842-4cfd-9665-887e28239e15",
                            TwoFactorEnabled = false,
                            UserName = "use1@gmail.com"
                        },
                        new
                        {
                            Id = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae78ffbb-27ea-4d58-9b50-bf98437ef7c0",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ0EfayAotJAwbzn4E2IfXVM+CbU6g3Ln3rcFVDY3ADH4vfizAAjnSGkjlx1SSlAyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "742b3032-36b6-4427-8e76-b64381d66307",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f0df8ee-2125-45e6-881d-da1304f93653",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA8nETLhRFLvvLPCo6646VMNqLkfyusLDjipCSWg7wAjnbQdIng2hMOs3VeEypsXpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12bf2cea-6b41-46ce-a34f-ae7140f8a2c2",
                            TwoFactorEnabled = false,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "891a1656-423c-43ab-9fcb-2dcfe6f48e28",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWAgPgfNTSLqcfDhXUckvQsLT5AdFOl5hvacRXPWee1gVJ/6yFxh8cVL0i6V9oV1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcc8b482-13e0-4c64-a3df-0d26f32309ee",
                            TwoFactorEnabled = false,
                            UserName = "user4@gmail.com"
                        },
                        new
                        {
                            Id = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c628d44b-a38f-4cf7-9e46-6d14f57a7508",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPfRaJGVYxalCkTC2YmoblnjgZbUyHHv1p6oMYj+SfT792Tw8AEv3j6NsjGTdKeuUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a763d9df-4a4e-4670-8ffb-0437a701815a",
                            TwoFactorEnabled = false,
                            UserName = "user5@gmail.com"
                        },
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dadab6e-b41e-48b7-ba09-57fbe58b4724",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELWVXqRDnsprrpiyK6z2bp7rc0zCLQuiu/epJt/L4CQS4L8naZ3c7qVyAKev4EERRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd6d519b-685b-45d4-ae54-3da02ec30553",
                            TwoFactorEnabled = false,
                            UserName = "user6@gmail.com"
                        });
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("RSVPs");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            EventId = 2,
                            Status = 0,
                            UserId = "043d41f5-929a-4e4d-b23a-d288d16eb967"
                        },
                        new
                        {
                            Id = 5,
                            EventId = 3,
                            Status = 0,
                            UserId = "043d41f5-929a-4e4d-b23a-d288d16eb967"
                        },
                        new
                        {
                            Id = 6,
                            EventId = 6,
                            Status = 0,
                            UserId = "043d41f5-929a-4e4d-b23a-d288d16eb967"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bc9fd39e-a1be-4f7f-aa91-725f964b9ddd",
                            ConcurrencyStamp = "bc9fd39e-a1be-4f7f-aa91-725f964b9ddd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "37746149-97d2-4ec8-8074-ceea9f48246b",
                            ConcurrencyStamp = "37746149-97d2-4ec8-8074-ceea9f48246b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            RoleId = "bc9fd39e-a1be-4f7f-aa91-725f964b9ddd"
                        },
                        new
                        {
                            UserId = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            RoleId = "37746149-97d2-4ec8-8074-ceea9f48246b"
                        },
                        new
                        {
                            UserId = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            RoleId = "37746149-97d2-4ec8-8074-ceea9f48246b"
                        },
                        new
                        {
                            UserId = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            RoleId = "37746149-97d2-4ec8-8074-ceea9f48246b"
                        },
                        new
                        {
                            UserId = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            RoleId = "37746149-97d2-4ec8-8074-ceea9f48246b"
                        },
                        new
                        {
                            UserId = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            RoleId = "37746149-97d2-4ec8-8074-ceea9f48246b"
                        },
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            RoleId = "37746149-97d2-4ec8-8074-ceea9f48246b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.HasOne("EventManagement.WebApi.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
