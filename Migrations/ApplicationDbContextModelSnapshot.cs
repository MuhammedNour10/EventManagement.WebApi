// <auto-generated />
using System;
using EventManagement.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagement.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventManagement.WebApi.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09b6ba64-8910-4002-85db-e9ef052fb89a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENcitl08S9ZuFvO74qNeInUHiccMITdNIhAszTY/zEkAPBj5UTluIa3Do/kGXDOdkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84b0a2db-f6fc-4909-a6ec-cd22344a341d",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc11f374-a5e4-4ff0-9bbc-135019fdbc2e",
                            Email = "use1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEChZRJNj6lQfLRR4tkMp+K5Zk9jM4cO8375PPPfc1KE0P4kRNhYLM8bvyt3nH86Z9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "628b6797-e84a-461a-bb49-dfd5d8affd61",
                            TwoFactorEnabled = false,
                            UserName = "use1@gmail.com"
                        },
                        new
                        {
                            Id = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcb86b2e-402b-40c4-8b35-aec4ae49c45c",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBcfpzP9/BmfvvLmwgb+MfPobPbARbxVFv7SfPKJfssr+2dRMtsha9yqC1JHQNwfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35a3dca5-d879-498a-b011-75a2d67aab1b",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "886bb7ea-1a58-4659-b0f9-baf5f8a526f3",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECsk4f6LuAXLveCWDDoF/yRzdqgVRb+GGPvS9Sfshph9oIVUAyYnpuBsLHWtlYByzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22f5bd93-5ab1-4658-b770-2a8d1b7563cd",
                            TwoFactorEnabled = false,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "151e2191-4abc-4a31-ba70-75d0ec2b7d63",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOCeSjFG5h+ZtZYcyLmNb8eUv9V58OVckCgydL37IKwwMLSmavE7O90yewbd6PfMOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8480a050-d173-48ed-935b-4e79a190baa5",
                            TwoFactorEnabled = false,
                            UserName = "user4@gmail.com"
                        },
                        new
                        {
                            Id = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04a423b4-c03a-4cd3-b781-651522657d06",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPjUw7uIAd5PT2owT1x+xBVZnd58dvDO81exbjOmZJGEQ+ntsd2GMexjp35WdBI/3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4865c9f8-b0e9-4f36-a653-72cd10b541e7",
                            TwoFactorEnabled = false,
                            UserName = "user5@gmail.com"
                        },
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f74fd96-a7e8-489e-bb77-3e67f5a84758",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpVrkhk5ALOjBawxT09fUzrApUsdr5xhP6AvRs69N+rZhQhDSamtW6T6wIW+mhBiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2096417-edb3-4228-80ca-f3223696f866",
                            TwoFactorEnabled = false,
                            UserName = "user6@gmail.com"
                        });
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("RSVPs");

                    b.HasData(
                        new
                        {
                            UserId = "043d41f5-929a-4e4d-b23a-d288d16eb967",
                            EventId = 2,
                            Status = 0
                        },
                        new
                        {
                            UserId = "043d41f5-929a-4e4d-b23a-d288d16eb967",
                            EventId = 3,
                            Status = 0
                        },
                        new
                        {
                            UserId = "043d41f5-929a-4e4d-b23a-d288d16eb967",
                            EventId = 6,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b2739138-e964-44ef-b4f3-4e940710075f",
                            ConcurrencyStamp = "b2739138-e964-44ef-b4f3-4e940710075f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8",
                            ConcurrencyStamp = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            RoleId = "b2739138-e964-44ef-b4f3-4e940710075f"
                        },
                        new
                        {
                            UserId = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            RoleId = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8"
                        },
                        new
                        {
                            UserId = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            RoleId = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8"
                        },
                        new
                        {
                            UserId = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            RoleId = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8"
                        },
                        new
                        {
                            UserId = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            RoleId = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8"
                        },
                        new
                        {
                            UserId = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            RoleId = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8"
                        },
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            RoleId = "b52a5c70-c96a-4c9c-b0f4-4ab5603a10a8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.HasOne("EventManagement.WebApi.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
