// <auto-generated />
using System;
using EventManagement.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagement.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250419141621_UpdateTimeDataTypeToString")]
    partial class UpdateTimeDataTypeToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventManagement.WebApi.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd19619f-ecc0-4cde-a187-cc3c808992e7",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEgKPg7NgrN/1DYwt9ozb87Vjc9HtR8GyVCYnm94IMc82qo57VYDh1FSPLHEI5T+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce3ff4ae-f9c9-41f2-9367-283c8ee9cf01",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "800f1801-ce71-4b59-9026-fdede81f0fe4",
                            Email = "use1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOkbr+rUQucCuUgz/U9VPq2lPKM8JqlufAFHFyOM1WtDofM6Ur4omfNIDmfYA2njTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a252698-be13-40e8-9a56-67c5d5b3b4ab",
                            TwoFactorEnabled = false,
                            UserName = "use1@gmail.com"
                        },
                        new
                        {
                            Id = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c5bca1d-0d12-4be7-ae73-4865fa634b3e",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPhm7t5lEl5qTFMe6qRI5ZdYCP19RC60/glad4mwhU4y4XAnRyrk01ZBDIWWB8+zTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "accf7467-e6c4-4521-a935-dd3eaba020c2",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be1e713c-b655-4590-9a5d-48e0fd41ee76",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMqA/A+Odd8QZz2rFUlSVgCcIWEgBB9IsARSGDiHRtw4ePNtJJl4Fof1DHsw/Cmqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83aced1e-d28b-4198-9260-e9fae74ef051",
                            TwoFactorEnabled = false,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b733147-9eec-4bcc-8c47-66b17c559c10",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkJMzNPBDqmsnYUgaMBLnyhrJ9t6XE8hw7bKTyEKrU+jHmUWasnAULOECUzJHa93Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39c9c95e-3d0b-4bfb-bb4a-c826386e1662",
                            TwoFactorEnabled = false,
                            UserName = "user4@gmail.com"
                        },
                        new
                        {
                            Id = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01dbf14d-65e5-4a69-8120-4e36d73cd7f5",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAMNetINbT9U27YRVbtpgj6GDoRTv4pg7ZKZ0iSDKf+rqRJHJA0jcE06dXdPvsdeCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ce9c686-c82a-49ee-955f-dc63fceb4f53",
                            TwoFactorEnabled = false,
                            UserName = "user5@gmail.com"
                        },
                        new
                        {
                            Id = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "586d1217-0568-4d3a-a72b-88250cf7633f",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FullName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBoCALpHbVzh3NJ1KCKu5f2iHIRriYVyqsegYpCms4yMEIp6kWKHzMflnd8fR2997Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7aa1510-0f87-4d89-99f8-d381da2b3f37",
                            TwoFactorEnabled = false,
                            UserName = "user6@gmail.com"
                        });
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("RSVPs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3fb7891d-ea8f-496e-99d2-01fc3162b0fe",
                            ConcurrencyStamp = "3fb7891d-ea8f-496e-99d2-01fc3162b0fe",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "77794ff3-cdd3-42d9-a643-68ab9163a715",
                            ConcurrencyStamp = "77794ff3-cdd3-42d9-a643-68ab9163a715",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-MH12MWDDG213",
                            RoleId = "3fb7891d-ea8f-496e-99d2-01fc3162b0fe"
                        },
                        new
                        {
                            UserId = "A9B9D7C4-2C6E-41A7-8FA6-5B8F1DABFA75",
                            RoleId = "77794ff3-cdd3-42d9-a643-68ab9163a715"
                        },
                        new
                        {
                            UserId = "B0D0E5C1-8F22-4E67-A0F1-3B8B4D3C4B92",
                            RoleId = "77794ff3-cdd3-42d9-a643-68ab9163a715"
                        },
                        new
                        {
                            UserId = "C1D1F3A2-4A1E-42C3-B6F4-4E5A55B7F3A1",
                            RoleId = "77794ff3-cdd3-42d9-a643-68ab9163a715"
                        },
                        new
                        {
                            UserId = "D2E2F4B3-5B2F-4F87-9F6F-5C8A5D0F4A20",
                            RoleId = "77794ff3-cdd3-42d9-a643-68ab9163a715"
                        },
                        new
                        {
                            UserId = "E3F3G5C4-6C2F-4D72-9E9B-6D1B6C3A8D11",
                            RoleId = "77794ff3-cdd3-42d9-a643-68ab9163a715"
                        },
                        new
                        {
                            UserId = "F4H4I6D5-7D3F-4E63-8F7F-7E2B7C9D4F31",
                            RoleId = "77794ff3-cdd3-42d9-a643-68ab9163a715"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.Event", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventManagement.WebApi.Model.RSVP", b =>
                {
                    b.HasOne("EventManagement.WebApi.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventManagement.WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
